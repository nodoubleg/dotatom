(function() {
  var alignment, escape, isEmpty, sortLength,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  escape = require('escape-regexp');

  sortLength = function(a, b) {
    return b.length - a.length;
  };

  isEmpty = function(x) {
    return x;
  };

  alignment = module.exports = function(text) {
    var alignText, ignoreSeparators, leftSeparators, rightSeparators, separatorRegExp, separators, spaceSeparators;
    leftSeparators = atom.config.get('alignment.leftSeparators');
    rightSeparators = atom.config.get('alignment.rightSeparators');
    ignoreSeparators = atom.config.get('alignment.ignoreSeparators');
    spaceSeparators = atom.config.get('alignment.spaceSeparators');
    separators = leftSeparators.concat(rightSeparators).concat(ignoreSeparators).filter(isEmpty).sort(sortLength).map(escape);
    if (!separators.length) {
      return;
    }
    separatorRegExp = new RegExp('^(?:' + ['\\\\.', '"(?:\\\\.|[^"])*?"', '\'(?:\\\\.|[^\'])*?\'', '[^\'"]'].join('|') + ')*?' + '(' + separators.join('|') + ')');
    alignText = function(text) {
      var findSeparator, leftLength, lines, matches, parts, positions, rightLines, rightParts;
      lines = text.split('\n');
      matches = 0;
      findSeparator = function(line, startIndex) {
        var match, _ref;
        startIndex = startIndex || 0;
        match = line.substr(startIndex).match(separatorRegExp);
        if (!match) {
          return;
        }
        if (_ref = match[1], __indexOf.call(ignoreSeparators, _ref) >= 0) {
          return findSeparator(line, match[0].length);
        }
        matches += 1;
        return [line.substr(0, startIndex + match[0].length - match[1].length).trimRight(), match[1], line.substr(startIndex + match[0].length).trimLeft()];
      };
      parts = lines.map(function(line) {
        return findSeparator(line);
      });
      if (!matches) {
        return [text, []];
      }
      rightParts = alignText(parts.map(function(part) {
        if (part) {
          return part[2];
        } else {
          return '';
        }
      }).join('\n'));
      rightLines = rightParts[0].split('\n');
      leftLength = parts.reduce(function(prev, part) {
        var length, _ref;
        if (!part) {
          return prev;
        }
        length = part[0].length + part[1].length + 1;
        if (_ref = part[1], __indexOf.call(spaceSeparators, _ref) >= 0) {
          length += 1;
        }
        if (length > prev) {
          return length;
        } else {
          return prev;
        }
      }, 0);
      positions = [];
      text = parts.map(function(part, index) {
        var line, padding, position, spaces, _ref, _ref1;
        if (!part) {
          return lines[index];
        }
        line = part[0];
        spaces = leftLength - line.length;
        position = 0;
        if (_ref = part[1], __indexOf.call(spaceSeparators, _ref) >= 0) {
          line += ' ';
          spaces -= 1;
        }
        padding = Array(spaces - part[1].length).join(' ');
        if (_ref1 = part[1], __indexOf.call(leftSeparators, _ref1) >= 0) {
          positions.push([index, line.length]);
          line += part[1] + padding;
        } else {
          line += padding + part[1];
          positions.push([index, line.length - part[1].length]);
        }
        if (rightParts[1][index]) {
          positions.push([rightParts[1][index][0], rightParts[1][index][1] + line.length + 1]);
        }
        return line + ' ' + rightLines[index];
      }).join('\n');
      return [text, positions];
    };
    return alignText(text);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLHNDQUFBO0lBQUEscUpBQUE7O0FBQUEsRUFBQSxNQUFBLEdBQVMsT0FBQSxDQUFRLGVBQVIsQ0FBVCxDQUFBOztBQUFBLEVBRUEsVUFBQSxHQUFhLFNBQUMsQ0FBRCxFQUFJLENBQUosR0FBQTtXQUNYLENBQUMsQ0FBQyxNQUFGLEdBQVcsQ0FBQyxDQUFDLE9BREY7RUFBQSxDQUZiLENBQUE7O0FBQUEsRUFLQSxPQUFBLEdBQVUsU0FBQyxDQUFELEdBQUE7V0FBTyxFQUFQO0VBQUEsQ0FMVixDQUFBOztBQUFBLEVBT0EsU0FBQSxHQUFZLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFNBQUMsSUFBRCxHQUFBO0FBQzNCLFFBQUEsMEdBQUE7QUFBQSxJQUFBLGNBQUEsR0FBbUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFaLENBQWdCLDBCQUFoQixDQUFuQixDQUFBO0FBQUEsSUFDQSxlQUFBLEdBQW1CLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBWixDQUFnQiwyQkFBaEIsQ0FEbkIsQ0FBQTtBQUFBLElBRUEsZ0JBQUEsR0FBbUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFaLENBQWdCLDRCQUFoQixDQUZuQixDQUFBO0FBQUEsSUFHQSxlQUFBLEdBQW1CLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBWixDQUFnQiwyQkFBaEIsQ0FIbkIsQ0FBQTtBQUFBLElBS0EsVUFBQSxHQUFhLGNBQ1gsQ0FBQyxNQURVLENBQ0gsZUFERyxDQUVYLENBQUMsTUFGVSxDQUVILGdCQUZHLENBR1gsQ0FBQyxNQUhVLENBR0gsT0FIRyxDQUlYLENBQUMsSUFKVSxDQUlMLFVBSkssQ0FLWCxDQUFDLEdBTFUsQ0FLTixNQUxNLENBTGIsQ0FBQTtBQVlBLElBQUEsSUFBVSxDQUFBLFVBQVcsQ0FBQyxNQUF0QjtBQUFBLFlBQUEsQ0FBQTtLQVpBO0FBQUEsSUFjQSxlQUFBLEdBQXNCLElBQUEsTUFBQSxDQUNwQixNQUFBLEdBQVMsQ0FDUCxPQURPLEVBRVAsb0JBRk8sRUFHUCx1QkFITyxFQUlQLFFBSk8sQ0FLUixDQUFDLElBTE8sQ0FLRixHQUxFLENBQVQsR0FLYyxLQUxkLEdBTUEsR0FOQSxHQU1NLFVBQVUsQ0FBQyxJQUFYLENBQWdCLEdBQWhCLENBTk4sR0FNNkIsR0FQVCxDQWR0QixDQUFBO0FBQUEsSUF3QkEsU0FBQSxHQUFZLFNBQUMsSUFBRCxHQUFBO0FBQ1YsVUFBQSxtRkFBQTtBQUFBLE1BQUEsS0FBQSxHQUFVLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBWCxDQUFWLENBQUE7QUFBQSxNQUNBLE9BQUEsR0FBVSxDQURWLENBQUE7QUFBQSxNQUdBLGFBQUEsR0FBZ0IsU0FBQyxJQUFELEVBQU8sVUFBUCxHQUFBO0FBQ2QsWUFBQSxXQUFBO0FBQUEsUUFBQSxVQUFBLEdBQWEsVUFBQSxJQUFjLENBQTNCLENBQUE7QUFBQSxRQUNBLEtBQUEsR0FBYSxJQUFJLENBQUMsTUFBTCxDQUFZLFVBQVosQ0FBdUIsQ0FBQyxLQUF4QixDQUE4QixlQUE5QixDQURiLENBQUE7QUFJQSxRQUFBLElBQVUsQ0FBQSxLQUFWO0FBQUEsZ0JBQUEsQ0FBQTtTQUpBO0FBT0EsUUFBQSxXQUFHLEtBQU0sQ0FBQSxDQUFBLENBQU4sRUFBQSxlQUFZLGdCQUFaLEVBQUEsSUFBQSxNQUFIO0FBQ0UsaUJBQU8sYUFBQSxDQUFjLElBQWQsRUFBb0IsS0FBTSxDQUFBLENBQUEsQ0FBRSxDQUFDLE1BQTdCLENBQVAsQ0FERjtTQVBBO0FBQUEsUUFVQSxPQUFBLElBQVcsQ0FWWCxDQUFBO2VBWUEsQ0FDRSxJQUFJLENBQUMsTUFBTCxDQUFZLENBQVosRUFBZSxVQUFBLEdBQWEsS0FBTSxDQUFBLENBQUEsQ0FBRSxDQUFDLE1BQXRCLEdBQStCLEtBQU0sQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUF2RCxDQUE4RCxDQUFDLFNBQS9ELENBQUEsQ0FERixFQUVFLEtBQU0sQ0FBQSxDQUFBLENBRlIsRUFHRSxJQUFJLENBQUMsTUFBTCxDQUFZLFVBQUEsR0FBYSxLQUFNLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBbEMsQ0FBeUMsQ0FBQyxRQUExQyxDQUFBLENBSEYsRUFiYztNQUFBLENBSGhCLENBQUE7QUFBQSxNQXVCQSxLQUFBLEdBQVEsS0FBSyxDQUFDLEdBQU4sQ0FBVSxTQUFDLElBQUQsR0FBQTtlQUNoQixhQUFBLENBQWMsSUFBZCxFQURnQjtNQUFBLENBQVYsQ0F2QlIsQ0FBQTtBQTRCQSxNQUFBLElBQXFCLENBQUEsT0FBckI7QUFBQSxlQUFPLENBQUMsSUFBRCxFQUFPLEVBQVAsQ0FBUCxDQUFBO09BNUJBO0FBQUEsTUErQkEsVUFBQSxHQUFhLFNBQUEsQ0FBVSxLQUFLLENBQUMsR0FBTixDQUFVLFNBQUMsSUFBRCxHQUFBO0FBQy9CLFFBQUEsSUFBRyxJQUFIO2lCQUFhLElBQUssQ0FBQSxDQUFBLEVBQWxCO1NBQUEsTUFBQTtpQkFBMEIsR0FBMUI7U0FEK0I7TUFBQSxDQUFWLENBRXRCLENBQUMsSUFGcUIsQ0FFaEIsSUFGZ0IsQ0FBVixDQS9CYixDQUFBO0FBQUEsTUFvQ0EsVUFBQSxHQUFhLFVBQVcsQ0FBQSxDQUFBLENBQUUsQ0FBQyxLQUFkLENBQW9CLElBQXBCLENBcENiLENBQUE7QUFBQSxNQXVDQSxVQUFBLEdBQWEsS0FBSyxDQUFDLE1BQU4sQ0FBYSxTQUFDLElBQUQsRUFBTyxJQUFQLEdBQUE7QUFDeEIsWUFBQSxZQUFBO0FBQUEsUUFBQSxJQUFlLENBQUEsSUFBZjtBQUFBLGlCQUFPLElBQVAsQ0FBQTtTQUFBO0FBQUEsUUFFQSxNQUFBLEdBQVMsSUFBSyxDQUFBLENBQUEsQ0FBRSxDQUFDLE1BQVIsR0FBaUIsSUFBSyxDQUFBLENBQUEsQ0FBRSxDQUFDLE1BQXpCLEdBQWtDLENBRjNDLENBQUE7QUFJQSxRQUFBLFdBQUcsSUFBSyxDQUFBLENBQUEsQ0FBTCxFQUFBLGVBQVcsZUFBWCxFQUFBLElBQUEsTUFBSDtBQUNFLFVBQUEsTUFBQSxJQUFVLENBQVYsQ0FERjtTQUpBO0FBT08sUUFBQSxJQUFHLE1BQUEsR0FBUyxJQUFaO2lCQUFzQixPQUF0QjtTQUFBLE1BQUE7aUJBQWtDLEtBQWxDO1NBUmlCO01BQUEsQ0FBYixFQVNYLENBVFcsQ0F2Q2IsQ0FBQTtBQUFBLE1BbURBLFNBQUEsR0FBWSxFQW5EWixDQUFBO0FBQUEsTUFzREEsSUFBQSxHQUFPLEtBQUssQ0FBQyxHQUFOLENBQVUsU0FBQyxJQUFELEVBQU8sS0FBUCxHQUFBO0FBQ2YsWUFBQSw0Q0FBQTtBQUFBLFFBQUEsSUFBdUIsQ0FBQSxJQUF2QjtBQUFBLGlCQUFPLEtBQU0sQ0FBQSxLQUFBLENBQWIsQ0FBQTtTQUFBO0FBQUEsUUFFQSxJQUFBLEdBQVcsSUFBSyxDQUFBLENBQUEsQ0FGaEIsQ0FBQTtBQUFBLFFBR0EsTUFBQSxHQUFXLFVBQUEsR0FBYSxJQUFJLENBQUMsTUFIN0IsQ0FBQTtBQUFBLFFBSUEsUUFBQSxHQUFXLENBSlgsQ0FBQTtBQU1BLFFBQUEsV0FBRyxJQUFLLENBQUEsQ0FBQSxDQUFMLEVBQUEsZUFBVyxlQUFYLEVBQUEsSUFBQSxNQUFIO0FBQ0UsVUFBQSxJQUFBLElBQVEsR0FBUixDQUFBO0FBQUEsVUFDQSxNQUFBLElBQVUsQ0FEVixDQURGO1NBTkE7QUFBQSxRQVVBLE9BQUEsR0FBVSxLQUFBLENBQU0sTUFBQSxHQUFTLElBQUssQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUF2QixDQUE4QixDQUFDLElBQS9CLENBQW9DLEdBQXBDLENBVlYsQ0FBQTtBQVlBLFFBQUEsWUFBRyxJQUFLLENBQUEsQ0FBQSxDQUFMLEVBQUEsZUFBVyxjQUFYLEVBQUEsS0FBQSxNQUFIO0FBQ0UsVUFBQSxTQUFTLENBQUMsSUFBVixDQUFlLENBQUMsS0FBRCxFQUFRLElBQUksQ0FBQyxNQUFiLENBQWYsQ0FBQSxDQUFBO0FBQUEsVUFDQSxJQUFBLElBQVEsSUFBSyxDQUFBLENBQUEsQ0FBTCxHQUFVLE9BRGxCLENBREY7U0FBQSxNQUFBO0FBSUUsVUFBQSxJQUFBLElBQVEsT0FBQSxHQUFVLElBQUssQ0FBQSxDQUFBLENBQXZCLENBQUE7QUFBQSxVQUNBLFNBQVMsQ0FBQyxJQUFWLENBQWUsQ0FBQyxLQUFELEVBQVEsSUFBSSxDQUFDLE1BQUwsR0FBYyxJQUFLLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBOUIsQ0FBZixDQURBLENBSkY7U0FaQTtBQW1CQSxRQUFBLElBQUcsVUFBVyxDQUFBLENBQUEsQ0FBRyxDQUFBLEtBQUEsQ0FBakI7QUFDRSxVQUFBLFNBQVMsQ0FBQyxJQUFWLENBQWUsQ0FDYixVQUFXLENBQUEsQ0FBQSxDQUFHLENBQUEsS0FBQSxDQUFPLENBQUEsQ0FBQSxDQURSLEVBRWIsVUFBVyxDQUFBLENBQUEsQ0FBRyxDQUFBLEtBQUEsQ0FBTyxDQUFBLENBQUEsQ0FBckIsR0FBMEIsSUFBSSxDQUFDLE1BQS9CLEdBQXdDLENBRjNCLENBQWYsQ0FBQSxDQURGO1NBbkJBO2VBeUJBLElBQUEsR0FBTyxHQUFQLEdBQWEsVUFBVyxDQUFBLEtBQUEsRUExQlQ7TUFBQSxDQUFWLENBMkJOLENBQUMsSUEzQkssQ0EyQkEsSUEzQkEsQ0F0RFAsQ0FBQTthQW9GQSxDQUFDLElBQUQsRUFBTyxTQUFQLEVBckZVO0lBQUEsQ0F4QlosQ0FBQTtXQWdIQSxTQUFBLENBQVUsSUFBVixFQWpIMkI7RUFBQSxDQVA3QixDQUFBO0FBQUEiCn0=
//# sourceURL=/Users/gmason/.atom/packages/alignment/lib/alignment.coffee