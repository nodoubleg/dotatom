var url = require('url');

module.exports = {
    config: {
        fontScale: {
            type: 'number',
            'default': 1.2,
            minimum: 0.5,
            maximum: 3
        },
        fontFamily: {
            type: 'string',
            'default': 'Inconsolata, Monaco, Consolas, \'Courier New\', Courier'
        }
    },
    activate: function activate() {
        atom.commands.add('atom-workspace', 'git-log:show', function (event) {
            /** Check valid repository */
            var repository = Promise.all(atom.project.getDirectories().map(atom.project.repositoryForDirectory.bind(atom.project)));
            repository.then(function (repos) {
                if (repos.length > 0) {
                    var repo_list = [];
                    var name;

                    for (var i = 0; i < repos.length; i++) {
                        if (repos[i] == null) continue;
                        repos[i].repo_name = repos[i].getWorkingDirectory().match(/([^\/]*)\/*$/)[1];
                        repo_list.push(repos[i]);
                    }
                    var RepoView = require('./git-repo-list.coffee');

                    new RepoView(repo_list);
                }
            });
        });

        return atom.workspace.addOpener(function (uri, options) {
            var error, host, pathname, protocol, ref;
            try {
                ref = url.parse(uri);
                protocol = ref.protocol;
                host = ref.host;
                pathname = ref.pathname;
            } catch (_error) {
                error = _error;
                return;
            }

            if (protocol !== 'git-log:') {
                return;
            }
            var GitLogView = require('./git-log-view');
            return new GitLogView(options.repo);
        });
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9nbWFzb24vLmF0b20vcGFja2FnZXMvZ2l0LWxvZy9saWIvZ2l0LWxvZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRXpCLE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDYixVQUFNLEVBQUU7QUFDTixpQkFBUyxFQUFFO0FBQ1QsZ0JBQUksRUFBRSxRQUFRO0FBQ2QsdUJBQVMsR0FBRztBQUNaLG1CQUFPLEVBQUUsR0FBRztBQUNaLG1CQUFPLEVBQUUsQ0FBQztTQUNYO0FBQ0Qsa0JBQVUsRUFBRTtBQUNWLGdCQUFJLEVBQUUsUUFBUTtBQUNkLHVCQUFTLHlEQUF1RDtTQUNqRTtLQUNGO0FBQ0QsWUFBUSxFQUFFLG9CQUFXO0FBQ2pCLFlBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLGNBQWMsRUFBRSxVQUFTLEtBQUssRUFBRTs7QUFFaEUsZ0JBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQzFELElBQUksQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0Qsc0JBQVUsQ0FBQyxJQUFJLENBQUMsVUFBUyxLQUFLLEVBQUU7QUFDNUIsb0JBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDakIsd0JBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNuQix3QkFBSSxJQUFJLENBQUM7O0FBRVQseUJBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzlCLDRCQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQ2YsU0FBUztBQUNiLDZCQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3RSxpQ0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDNUI7QUFDRCx3QkFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7O0FBRWpELHdCQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDM0I7YUFDSixDQUFDLENBQUM7U0FDTixDQUFDLENBQUM7O0FBRUgsZUFBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFTLEdBQUcsRUFBRSxPQUFPLEVBQUU7QUFDbkQsZ0JBQUksS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQztBQUN6QyxnQkFBSTtBQUNBLG1CQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNyQix3QkFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFDeEIsb0JBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO0FBQ2hCLHdCQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQzthQUMzQixDQUNELE9BQU8sTUFBTSxFQUFFO0FBQ1gscUJBQUssR0FBRyxNQUFNLENBQUM7QUFDZix1QkFBTzthQUNWOztBQUVELGdCQUFHLFFBQVEsS0FBSyxVQUFVLEVBQUU7QUFDeEIsdUJBQU87YUFDVjtBQUNELGdCQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUMzQyxtQkFBTyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdkMsQ0FBQyxDQUFDO0tBQ047Q0FDSixDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9nbWFzb24vLmF0b20vcGFja2FnZXMvZ2l0LWxvZy9saWIvZ2l0LWxvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB1cmwgPSByZXF1aXJlKCd1cmwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY29uZmlnOiB7XG4gICAgICBmb250U2NhbGU6IHtcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgIGRlZmF1bHQ6IDEuMixcbiAgICAgICAgbWluaW11bTogMC41LFxuICAgICAgICBtYXhpbXVtOiAzXG4gICAgICB9LFxuICAgICAgZm9udEZhbWlseToge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgZGVmYXVsdDogXCJJbmNvbnNvbGF0YSwgTW9uYWNvLCBDb25zb2xhcywgJ0NvdXJpZXIgTmV3JywgQ291cmllclwiXG4gICAgICB9XG4gICAgfSxcbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGF0b20uY29tbWFuZHMuYWRkKFwiYXRvbS13b3Jrc3BhY2VcIiwgXCJnaXQtbG9nOnNob3dcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIC8qKiBDaGVjayB2YWxpZCByZXBvc2l0b3J5ICovXG4gICAgICAgICAgICB2YXIgcmVwb3NpdG9yeSA9IFByb21pc2UuYWxsKGF0b20ucHJvamVjdC5nZXREaXJlY3RvcmllcygpLm1hcChcbiAgICAgICAgICAgICAgICBhdG9tLnByb2plY3QucmVwb3NpdG9yeUZvckRpcmVjdG9yeS5iaW5kKGF0b20ucHJvamVjdCkpKTtcbiAgICAgICAgICAgIHJlcG9zaXRvcnkudGhlbihmdW5jdGlvbihyZXBvcykge1xuICAgICAgICAgICAgICAgIGlmKHJlcG9zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcG9fbGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxyZXBvcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVwb3NbaV0gPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9zW2ldLnJlcG9fbmFtZSA9IHJlcG9zW2ldLmdldFdvcmtpbmdEaXJlY3RvcnkoKS5tYXRjaCgvKFteXFwvXSopXFwvKiQvKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9fbGlzdC5wdXNoKHJlcG9zW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgUmVwb1ZpZXcgPSByZXF1aXJlKCcuL2dpdC1yZXBvLWxpc3QuY29mZmVlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IFJlcG9WaWV3KHJlcG9fbGlzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhdG9tLndvcmtzcGFjZS5hZGRPcGVuZXIoZnVuY3Rpb24odXJpLCBvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IsIGhvc3QsIHBhdGhuYW1lLCBwcm90b2NvbCwgcmVmO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZWYgPSB1cmwucGFyc2UodXJpKTtcbiAgICAgICAgICAgICAgICBwcm90b2NvbCA9IHJlZi5wcm90b2NvbDtcbiAgICAgICAgICAgICAgICBob3N0ID0gcmVmLmhvc3Q7XG4gICAgICAgICAgICAgICAgcGF0aG5hbWUgPSByZWYucGF0aG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2Vycm9yKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBfZXJyb3I7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihwcm90b2NvbCAhPT0gXCJnaXQtbG9nOlwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIEdpdExvZ1ZpZXcgPSByZXF1aXJlKCcuL2dpdC1sb2ctdmlldycpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBHaXRMb2dWaWV3KG9wdGlvbnMucmVwbyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG4iXX0=